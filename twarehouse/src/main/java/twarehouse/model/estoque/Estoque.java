package twarehouse.model.estoque;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import twarehouse.model.Produto;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : pcp
//  @ File Name : Estoque.java
//  @ Date : 15/09/2015
//  @ Author : Sidronio Lima
//
//
public class Estoque {
	
	private List<Movimento> movimentos;
	
	public Estoque() {
		this.movimentos = new ArrayList<Movimento>();
	}	
	
	public void saida(
			Almoxarifado almoxarifadoOrigem, 
			Produto produto, 
			BigDecimal qtd, 
			OrigemMovimento origem) {
		
		Movimento movimentoDeSaida = new MovimentoBuilder()
				.saida()
				.doAlmoxarifado(almoxarifadoOrigem)
				.doProduto(produto)
				.comQuantidade(qtd)
				.daOrigem(origem)
				.cria();
		
		this.movimenta(movimentoDeSaida);
		
	}
	
	public void entrada(
			Almoxarifado almoxarifadoOrigem, 
			Produto produto, 
			BigDecimal qtd, 
			OrigemMovimento origem) {
		
		Movimento movimentoDeEntrada = new MovimentoBuilder()
				.entrada()
				.doAlmoxarifado(almoxarifadoOrigem)
				.doProduto(produto)
				.comQuantidade(qtd)
				.daOrigem(origem)
				.cria();
		
		this.movimenta(movimentoDeEntrada);
		
	}
	
	public void transferencia(
			Almoxarifado almoxarifadoOrigem, 
			Almoxarifado almoxarifadoDestino, 
			Produto produto, 
			BigDecimal qtd, 
			OrigemMovimento origem) {
		
		Movimento movimentoDeSaida = new MovimentoBuilder()
				.saida()
				.doAlmoxarifado(almoxarifadoOrigem)
				.doProduto(produto)
				.comQuantidade(qtd)
				.daOrigem(origem)
				.cria();
		
		this.movimenta(movimentoDeSaida);
		
		Movimento movimentoDeEntrada = new MovimentoBuilder()
				.entrada()
				.doAlmoxarifado(almoxarifadoDestino)
				.doProduto(produto)
				.comQuantidade(qtd)
				.daOrigem(origem)
				.cria();
		
		this.movimenta(movimentoDeEntrada);
	}
	
	public BigDecimal estoqueDoProduto(Produto produto, Almoxarifado almoxarifado) {
		
		BigDecimal qtdEntrada = BigDecimal.ZERO;
		BigDecimal qtdSaida = BigDecimal.ZERO;
		
		qtdEntrada = movimentos
				.stream()
				.filter(movimento -> movimento.getTipoMovimento().equals(TipoMovimento.ENTRADA))
				.filter(movimento -> movimento.getAlmoxarifado().equals(almoxarifado))
				.collect(Collectors.toList())
				.stream()
				.map(Movimento::getQtd)
				.reduce(BigDecimal.ZERO, BigDecimal::add);
		
		qtdSaida =	movimentos
				.stream()
				.filter(movimento -> movimento.getTipoMovimento().equals(TipoMovimento.SAIDA))
				.filter(movimento -> movimento.getAlmoxarifado().equals(almoxarifado))
				.collect(Collectors.toList())
				.stream()
				.map(Movimento::getQtd)
				.reduce(BigDecimal.ZERO, BigDecimal::add);
		
		return qtdEntrada.subtract(qtdSaida);
	}
	
	private void movimenta(Movimento movimento) {
		this.movimentos.add(movimento);
	}
}
